## conversione_ean_prodotto normalization
missing_values(conversione_ean_prodotto)
# Barplot OCCUSO_DES per mostrare che si parla principalmente di pannolini
ggplot(conversione_ean_prodotto,
aes(x=reorder(OCCUSO_DES, OCCUSO_DES, function(x)-length(x)))) +
geom_bar(color = 'black', fill = 'white') +
labs(title = 'Plot type of product', x = 'Type', y = 'Frequency')
graph<-ggplot(active_users, aes(x=num_prod, y = points_prodotti))+
geom_point()+
labs(title = 'Linear regression cost EU vs Type of course', x = 'Type of course', y = 'Cost EU')
graph <- graph + geom_smooth(method="lm", col="blue")
graph <- graph +
stat_regline_equation(label.x = 1, label.y = 1)
graph
graph<-ggplot(active_users, aes(x=num_prod, y = points_prodotti))+
geom_point()+
labs(title = 'Linear regression cost EU vs Type of course', x = 'Type of course', y = 'Cost EU')
############ LIBRARIES #############
library(readr)
library(dplyr)
library(ggplot2)
library(lubridate)
library(visdat)
library(tidyr)
library(naniar)
library(corrplot)
library(reshape2)
library(psych)
library(randomForest)
library(caret)
library(devtools)
library(factoextra)
library(FactoMineR)
library(ggpubr)
library(ggrepel)
library(mlbench)
library(caret)
library(ranger)
library(tidymodels)
library(yardstick)
library(glmnet)
library(forcats)
library(pROC)
library(yardstick)
doParallel::registerDoParallel(cores = 7)
setwd("C:/Users/gltut/OneDrive - UniversitÃ  di Napoli Federico II/Magistrale/Primo anno/Statistical Data Analisys/FATER")
# Function needed by missing_values
toBinaryMatrix <- function(df){
m<-c()
for(i in colnames(df)){
x<-sum(is.na(df[,i]))
# missing value count
m<-append(m,x)
# non-missing value count
m<-append(m,nrow(df)-x)
}
# adding column and row names to matrix
a<-matrix(m,nrow=2)
rownames(a)<-c("TRUE","FALSE")
colnames(a)<-colnames(df)
return(a)
}
# Confusin matrix for supervised models
draw_confusion_matrix <- function(cm) {
layout(matrix(c(1,1,2)))
par(mar=c(2,2,2,2))
plot(c(100, 345), c(300, 450), type = "n", xlab="", ylab="", xaxt='n', yaxt='n')
title('CONFUSION MATRIX', cex.main=2)
# create the matrix
rect(150, 430, 240, 370, col='#3F97D0')
text(195, 435, 'CHURN', cex=1.2)
rect(250, 430, 340, 370, col='#F7AD50')
text(295, 435, 'NOCHURN', cex=1.2)
text(125, 370, 'Predicted', cex=1.3, srt=90, font=2)
text(245, 450, 'Actual', cex=1.3, font=2)
rect(150, 305, 240, 365, col='#F7AD50')
rect(250, 305, 340, 365, col='#3F97D0')
text(140, 400, 'CHURN', cex=1.2, srt=90)
text(140, 335, 'NOCHURN', cex=1.2, srt=90)
# add in the cm results
res <- as.numeric(cm$table)
text(195, 400, res[1], cex=1.6, font=2, col='white')
text(195, 335, res[2], cex=1.6, font=2, col='white')
text(295, 400, res[3], cex=1.6, font=2, col='white')
text(295, 335, res[4], cex=1.6, font=2, col='white')
# add in the specifics
plot(c(100, 0), c(100, 0), type = "n", xlab="", ylab="", main = "DETAILS", xaxt='n', yaxt='n')
text(10, 85, names(cm$byClass[1]), cex=1.2, font=2)
text(10, 70, round(as.numeric(cm$byClass[1]), 3), cex=1.2)
text(30, 85, names(cm$byClass[2]), cex=1.2, font=2)
text(30, 70, round(as.numeric(cm$byClass[2]), 3), cex=1.2)
text(50, 85, names(cm$byClass[5]), cex=1.2, font=2)
text(50, 70, round(as.numeric(cm$byClass[5]), 3), cex=1.2)
text(70, 85, names(cm$byClass[6]), cex=1.2, font=2)
text(70, 70, round(as.numeric(cm$byClass[6]), 3), cex=1.2)
text(90, 85, names(cm$byClass[7]), cex=1.2, font=2)
text(90, 70, round(as.numeric(cm$byClass[7]), 3), cex=1.2)
# add in the accuracy information
text(30, 35, names(cm$overall[1]), cex=1.5, font=2)
text(30, 20, round(as.numeric(cm$overall[1]), 3), cex=1.4)
text(70, 35, names(cm$overall[2]), cex=1.5, font=2)
text(70, 20, round(as.numeric(cm$overall[2]), 3), cex=1.4)
}
# Plotting the glmnet regression
plotting_model_cv <- function(model, ALPHA){
betas = as.matrix(model$beta)
lambdas = model$lambda
names(lambdas) = colnames(betas)
as.data.frame(betas) %>%
tibble::rownames_to_column("variable") %>%
pivot_longer(-variable) %>%
mutate(lambda=lambdas[name]) %>%
ggplot(aes(x=lambda,y=value,col=variable)) +
geom_line() +
geom_label_repel(data=~subset(.x,lambda==min(lambda)),
aes(label=variable),nudge_x=-0.5) +
scale_x_log10() +
labs(title = paste('Alpha = ', ALPHA), x = 'Lambda', y = 'Value') +
theme(plot.title = element_text(hjust = 0.5))
}
######### DATASETS #########
anagrafica <- read_csv("data/anagrafica.csv", show_col_types = FALSE,
col_types = cols(Provincia = col_skip(),
SiglaProvincia = col_skip(), Comune = col_skip()))
######### DATASETS #########
anagrafica <- read_csv("data/anagrafica.csv", show_col_types = FALSE,
col_types = cols(Provincia = col_skip(),
SiglaProvincia = col_skip(), Comune = col_skip()))
print(colSums(is.na(anagrafica)))
binMat = toBinaryMatrix(anagrafica)
barplot(binMat,
main = "Missing values in all features",xlab = "Frequency",
col = c("black","white"))
gg_miss_var(anagrafica, show_pct = TRUE)
ggplot(anagrafica, aes(x=reorder(Regione,Regione, function(x)-length(x)))) +
geom_bar(color = 'black', fill = 'white') +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))+
labs(title =  'Count of players for each region', x = 'Regione', y  = 'Count')
ggplot(subset(anagrafica, !(is.na(ETA_MM_BambinoTODAY))), aes(x = ETA_MM_BambinoTODAY))+
geom_histogram(color = 'black', fill = 'white', binwidth = 1) +
labs (title = "Histogram childs' age", x = 'Months', y = 'Count')
################### Visualization anagrafica_2 ###################
anagrafica_2 = anagrafica
# Plotto il numero di parti per ogni anno ed ogni mese (2021 stesso andamento 2020 https://www.truenumbers.it/i-mesi-con-piu-nati/)
num_parti = anagrafica_2 %>%
group_by(factor(month(DtaPresuntoParto)), factor(year(DtaPresuntoParto))) %>%
summarise(parti = n())
#Tolgo i NA
num_parti = drop_na(num_parti)
colnames(num_parti)[1] = 'Month'
colnames(num_parti)[2] = 'Year'
num_parti = filter(num_parti, Year %in% c(2020, 2021, 2022))
ggplot(num_parti, aes(x = Month, y = parti, fill = Year)) +
geom_bar(stat = "identity", position = 'dodge') +
labs(title = "Births' number each month", x = "Month", y = 'Count')
table(year(anagrafica$DtaPresuntoParto))
######### DATASETS #########
accessi_app <- read_csv("accessi_app.csv", show_col_types = FALSE)
######### DATASETS #########
accessi_app <- read_csv("data/accessi_app.csv", show_col_types = FALSE)
survey_start = as.Date(min(accessi_app$updated_at))
survey_end = as.Date(max(accessi_app$updated_at))
survey_period = survey_end - survey_start
survey_period
table(accessi_app$source)
accessi_app = accessi_app[- 2]
sum(is.na(accessi_app))
accessi_app$updated_atMONTH = as.factor(month(accessi_app$updated_at))
ggplot(data=accessi_app, aes(x=updated_atMONTH)) +
geom_bar( width=0.5, color = 'black', fill = 'white') +
labs(title = 'Access number for each month of the survey', x = 'Month', y = 'Count') +
scale_x_discrete(labels = c('March', 'April', 'May', 'June', 'July', 'August', 'September'))
prodotti_caricati <- read_csv('prodotti_caricati.csv', show_col_types = FALSE)
prodotti_caricati <- read_csv('data/prodotti_caricati.csv', show_col_types = FALSE)
prodotti_caricati = filter(prodotti_caricati, created_at >= survey_start & created_at <= survey_end)
print(colSums(is.na(prodotti_caricati)))
binMat = toBinaryMatrix(prodotti_caricati)
barplot(binMat,
main = "Missing values in all features",xlab = "Frequency",
col = c("black","white"))
gg_miss_var(prodotti_caricati, show_pct = TRUE)
ggplot(prodotti_caricati, aes(x = points))+
geom_histogram(color = 'black', fill = 'white', binwidth = 65)+
labs(title = 'Histogram of uploaded products points', x = 'Points', y = 'Frequency')
missioni_players <- read_csv("data/missioni_players.csv", show_col_types = FALSE,
col_types = cols(type = col_skip()))
missioni_players = filter(missioni_players, created_at >= survey_start & created_at <= survey_end)
ggplot(missioni_players, aes(x = points)) +
geom_histogram(color = 'black', fill = 'white')+
labs(title = 'Histogram of mission points', x = 'Points', y = 'Frequency', binwidth = 65)
table(missioni_players$subType)
pcts <- missioni_players %>%
group_by(subType) %>%
count() %>%
ungroup() %>%
mutate(percentage=`n`/sum(`n`) * 100)
ggplot(pcts, aes(x=1, y=percentage, fill=subType)) +
geom_bar(stat="identity") +
geom_text(aes(label = paste0(round(percentage,1),"%")),position = position_stack(vjust = 0.5)) +
coord_polar(theta = "y") +
theme_void()
ggplot(missioni_players, aes(x = subType, y = points))+
geom_boxplot(color = 'black')+
stat_summary()+
stat_boxplot(geom ='errorbar', width = 0.5)+
labs(title = "Points for mission's type", x = 'Type', y = 'Count')
missioni_players$subType = as.factor(missioni_players$subType)
missioni_players1 = missioni_players
aov_missioni = aov(points ~ subType, subset(missioni_players1, !(is.na(subType))))
summary(aov_missioni)
plot(TukeyHSD(aov_missioni, "subType", ordered = T, main = 'One way'))
premi_mamme <- read_csv("premi_mamme.csv", show_col_types = FALSE,
col_types = cols(deliveryMode = col_skip(),
nomepremio = col_skip()))
premi_mamme <- read_csv("data/premi_mamme.csv", show_col_types = FALSE,
col_types = cols(deliveryMode = col_skip(),
nomepremio = col_skip()))
premi_mamme = filter(premi_mamme, datarichiestapremio >= survey_start & datarichiestapremio <= survey_end)
table(premi_mamme$formatPremio)
pcts <- premi_mamme %>%
group_by(formatPremio) %>%
count() %>%
ungroup() %>%
mutate(percentage=`n`/sum(`n`) * 100)
ggplot(pcts, aes(x=1, y=percentage, fill=formatPremio)) +
geom_bar(stat="identity") +
geom_text(aes(label = paste0(round(percentage,1),"%")),position = position_stack(vjust = 0.5)) +
coord_polar(theta = "y") +
theme_void()
premi_mamme = select(premi_mamme, - 'formatPremio')
table(premi_mamme$tipopremio)
pcts <- premi_mamme %>%
group_by(tipopremio) %>%
count() %>%
ungroup() %>%
mutate(percentage=`n`/sum(`n`) * 100)
ggplot(pcts, aes(x=1, y=percentage, fill=tipopremio)) +
geom_bar(stat="identity") +
geom_text(aes(label = paste0(round(percentage,1),"%")),position = position_stack(vjust = 0.5)) +
coord_polar(theta = "y") +
theme_void()
ggplot(premi_mamme, aes(x = tipopremio, y = puntipremio))+
geom_boxplot(color = 'black')+
stat_summary(fun.y=mean, geom="point") +
stat_boxplot(geom ='errorbar', width = 0.5) +
labs(title = 'Boxplot punti premi rispetto al tipo', x = 'Type', y = 'Punti')
conversione_ean_prodotto <- read_csv("conversione_ean_prodotto.csv",
col_types = cols(REFERENZA_DES = col_skip(),
SEGMENTO_DES = col_skip()))
conversione_ean_prodotto <- read_csv("data/conversione_ean_prodotto.csv",
col_types = cols(REFERENZA_DES = col_skip(),
SEGMENTO_DES = col_skip()))
table(conversione_ean_prodotto$OCCUSO_DES)
ggplot(conversione_ean_prodotto, aes(x = OCCUSO_DES)) +
geom_bar(color = 'black', fill = 'white')+
coord_flip()
prodotti = merge(prodotti_caricati, conversione_ean_prodotto, all.x = TRUE)
prodotti$TIER = as.factor(prodotti$TIER)
ggplot(subset(prodotti, !is.na(OCCUSO_DES)), aes(x = reorder(OCCUSO_DES, points), y = points)) +
geom_boxplot(color = 'black', width = 0.3, na.rm = TRUE) +
stat_summary(fun.y=mean, geom="point") +
stat_boxplot(geom = 'errorbar', width = 0.3) +
labs(title = "Boxplot products' points", x = 'Type', y = 'Points')
table(prodotti$OCCUSO_DES, prodotti$TIER)
ggplot(subset(prodotti, !is.na(OCCUSO_DES)), aes(x = TIER, fill = OCCUSO_DES)) +
geom_bar(position = 'dodge') +
stat_boxplot(geom = 'errorbar', width = 0.3) +
labs(title = "Barplot products' points", x = 'TIER', y = 'Points')
ggplot(subset(prodotti, !is.na(TIER)), aes(x = reorder(TIER, points), y = points)) +
geom_boxplot(color = 'black', width = 0.3, na.rm = TRUE) +
stat_summary(fun.y=mean, geom="point") +
stat_boxplot(geom ='errorbar', width = 0.2) +
labs(title = "Boxplot products' points", x = 'TIER', y = 'Points')
ggplot(subset(prodotti, !is.na(TIER)), aes(x = reorder(TIER, points), y = points)) +
geom_boxplot(color = 'black', width = 0.3, na.rm = TRUE) +
stat_summary(fun.y=mean, geom="diamond") +
stat_boxplot(geom ='errorbar', width = 0.2) +
labs(title = "Boxplot products' points", x = 'TIER', y = 'Points')
ggplot(subset(prodotti, !is.na(TIER)), aes(x = reorder(TIER, points), y = points)) +
geom_boxplot(color = 'black', width = 0.3, na.rm = TRUE) +
stat_summary(fun.y=mean, geom="point", color = 'red') +
stat_boxplot(geom ='errorbar', width = 0.2) +
labs(title = "Boxplot products' points", x = 'TIER', y = 'Points')
a = aov(points ~ TIER, data = prodotti)
summary(a)
plot(TukeyHSD(a, "TIER", ordered = T, main = 'One way'))
last_access = accessi_app %>%
group_by(id_player)%>%
summarise(last_access = max(updated_at))
# Only players that have made at least one access
active_users = merge(last_access, anagrafica, all.x = TRUE)
active_users$last_time =  survey_end - as.Date(active_users$last_access)
active_users$last_time = as.double(active_users$last_time)
app_time = accessi_app %>%
group_by(id_player) %>%
summarise(tempo_app = as.Date(max(updated_at)) - as.Date(min(updated_at)))
# agiungo la variabile tempo app e la converto in double
active_users = merge(active_users, app_time, all.x = TRUE)
active_users$tempo_app = as.double(active_users$tempo_app)
prod_per_user = prodotti_caricati %>%
group_by(id_player)%>%
summarise(num_prod = n())
active_users = merge(active_users, prod_per_user, all.x = TRUE)
# Variabile categorica TIER
TIER_num = prodotti %>%
group_by(id_player, TIER) %>%
summarise(num = n())
TIER1_num = filter(TIER_num, TIER == 'TIER1')
colnames(TIER1_num)[3] = 'TIER1'
TIER1_num = TIER1_num[-2]
TIER2_num = filter(TIER_num, TIER == 'TIER2')
colnames(TIER2_num)[3] = 'TIER2'
TIER2_num = TIER2_num[-2]
TIER3_num = filter(TIER_num, TIER == 'TIER3')
colnames(TIER3_num)[3] = 'TIER3'
TIER3_num = TIER3_num[-2]
active_users  = merge(active_users, TIER1_num, all.x = TRUE)
active_users  = merge(active_users, TIER2_num, all.x = TRUE)
active_users  = merge(active_users, TIER3_num, all.x = TRUE)
rewards = premi_mamme %>%
group_by(id_player)%>%
summarise(num_reward = n())
active_users = merge(active_users, rewards, all.x = TRUE)
tipo_premio = premi_mamme %>%
group_by(id_player, tipopremio) %>%
summarise(num = n())
basic = filter(tipo_premio, tipopremio == 'basic')
colnames(basic)[3] = 'basic'
basic = basic[-2]
special = filter(tipo_premio, tipopremio == 'special')
colnames(special)[3] = 'special'
special = special[-2]
active_users  = merge(active_users, basic, all.x = TRUE)
active_users  = merge(active_users, special, all.x = TRUE)
access_freq = accessi_app %>%
group_by(id_player)%>%
summarise(num_access = n())
active_users = merge(active_users, access_freq, all.x = TRUE)
missions_num = missioni_players %>%
group_by(id_player)%>%
summarise(num_missioni = n())
active_users = merge(active_users, missions_num, all.x = TRUE)
misstype_num = missioni_players %>%
group_by(id_player, subType) %>%
summarise(num = n())
cib_num = filter(misstype_num, subType == 'cib')
colnames(cib_num)[3] = 'cib'
cib_num = cib_num[-2]
double_num = filter(misstype_num, subType == 'double')
colnames(double_num)[3] = 'double'
double_num = double_num[-2]
ticket_num = filter(misstype_num, subType == 'ticket-punti')
colnames(ticket_num)[3] = 'ticket-punti'
ticket_num = ticket_num[-2]
active_users  = merge(active_users, cib_num, all.x = TRUE)
active_users  = merge(active_users, double_num, all.x = TRUE)
active_users  = merge(active_users, ticket_num, all.x = TRUE)
points_num = prodotti_caricati %>%
group_by(id_player)%>%
summarise(points_prodotti = sum(points))
active_users = merge(active_users, points_num, all.x = TRUE)
points_mission = missioni_players %>%
group_by(id_player)%>%
summarise(points_missioni = sum(points))
active_users = merge(active_users, points_mission, all.x = TRUE)
## Somma punti spesi per richiesta premi
points_expense = premi_mamme %>%
group_by(id_player)%>%
summarise(points_premi = sum(puntipremio))
active_users = merge(active_users, points_expense, all.x = TRUE)
## Tutti i NA per le colonne calcolate 'double' imposti = 0
active_users[8:length(active_users)][is.na(active_users[8:length(active_users)])] = 0
active_users = filter(active_users, tempo_app >= 7 & !is.na(ETA_MM_BambinoTODAY))
active_users = filter(active_users, ETA_MM_BambinoTODAY >-1 | num_prod != 0 | num_missioni != 0 | num_reward != 0)
active_users$week_access = round(active_users$num_access / (active_users$tempo_app/7), 2)
# Missioni
active_users$week_mission = round(active_users$num_missioni / (active_users$tempo_app/7), 2)
active_users$week_cib = round(active_users$cib / (active_users$tempo_app/7), 2)
active_users$week_double = round(active_users$double / (active_users$tempo_app/7), 2)
active_users$week_ticket = round(active_users$ticket / (active_users$tempo_app/7), 2)
# Prodotti caricati
active_users$week_prod = round(active_users$num_prod/(active_users$tempo_app/7), 2)
active_users$week_TIER1 = round(active_users$TIER1/(active_users$tempo_app/7), 2)
active_users$week_TIER2 = round(active_users$TIER2/(active_users$tempo_app/7), 2)
active_users$week_TIER3 = round(active_users$TIER3/(active_users$tempo_app/7), 2)
# Premi richiesti
active_users$week_reward = round(active_users$num_reward/(active_users$tempo_app/7), 2)
active_users$week_special = round(active_users$special/(active_users$tempo_app/7), 2)
active_users$week_basic = round(active_users$basic/(active_users$tempo_app/7), 2)
# Punti ottenuti e spesi
active_users$week_prodpoints = round((active_users$points_prodotti/100)/(active_users$tempo_app/7), 2)
active_users$week_misspoints = round((active_users$points_missioni/100)/(active_users$tempo_app/7), 2)
active_users$week_rewpoints = round((active_users$points_premi/100)/(active_users$tempo_app/7), 2)
lm_punti_prodotti = lm(points_prodotti ~ num_prod, active_users)
summary(lm_punti_prodotti)
ggplot(active_users, aes(x = num_prod, y = points_prodotti)) +
geom_point()+
geom_abline(intercept = lm_punti_prodotti$coefficients[1], slope = lm_punti_prodotti$coefficients[2], col = 'blue') +
labs(title = "Linear model between products' number and points", x = "# products", y = 'Points')
par(mfrow=c(2,2))
plot(lm_punti_prodotti)
par(mfrow=c(1,1))
lm_punti_missioni = lm(points_missioni ~ num_missioni, active_users)
summary(lm_punti_missioni)
ggplot(active_users, aes(x = num_missioni, y = points_missioni)) +
geom_point()+
geom_abline(intercept = lm_punti_missioni$coefficients[1], slope = lm_punti_missioni$coefficients[2], col = 'blue') +
labs(title = "Linear model between missions' number and points", x = "# missions", y = 'Points')
lm_punti_prodotti = lm(points_prodotti ~ num_prod, active_users)
summary(lm_punti_prodotti)
ggplot(active_users, aes(x = num_prod, y = points_prodotti)) +
geom_boxplot(color = 'black', width = 0.3, na.rm = TRUE) +
geom_point()+
geom_abline(intercept = lm_punti_prodotti$coefficients[1], slope = lm_punti_prodotti$coefficients[2], col = 'blue') +
labs(title = "Linear model between products' number and points", x = "# products", y = 'Points')
ggplot(active_users, aes(x = num_prod, y = points_prodotti)) +
geom_boxplot(color = 'black', width = 0.3, na.rm = TRUE) +
geom_abline(intercept = lm_punti_prodotti$coefficients[1], slope = lm_punti_prodotti$coefficients[2], col = 'blue') +
labs(title = "Linear model between products' number and points", x = "# products", y = 'Points')
+
ggplot(active_users, aes(x = num_prod, y = points_prodotti)) +
geom_point()+
geom_abline(intercept = lm_punti_prodotti$coefficients[1], slope = lm_punti_prodotti$coefficients[2], col = 'blue') +
labs(title = "Linear model between products' number and points", x = "# products", y = 'Points')
ggplot(active_users, aes(x = num_prod, y = points_prodotti)) +
geom_point()+
geom_abline(intercept = lm_punti_prodotti$coefficients[1], slope = lm_punti_prodotti$coefficients[2], col = 'blue') +
labs(title = "Linear model between products' number and points", x = "# products", y = 'Points')
ggplot(active_users, aes(x = num_missioni, y = points_missioni)) +
geom_boxplot(color = 'black', width = 0.3, na.rm = TRUE) +
geom_point()+
geom_abline(intercept = lm_punti_missioni$coefficients[1], slope = lm_punti_missioni$coefficients[2], col = 'blue') +
labs(title = "Linear model between missions' number and points", x = "# missions", y = 'Points')
ggplot(active_users, aes(x = as.factor(num_missioni), y = points_missioni)) +
geom_boxplot(color = 'black', width = 0.3, na.rm = TRUE) +
geom_point()+
geom_abline(intercept = lm_punti_missioni$coefficients[1], slope = lm_punti_missioni$coefficients[2], col = 'blue') +
labs(title = "Linear model between missions' number and points", x = "# missions", y = 'Points')
ggplot(active_users, aes(x = as.factor(num_missioni), y = points_missioni)) +
geom_boxplot(color = 'black', width = 0.3, na.rm = TRUE) +
geom_abline(intercept = lm_punti_missioni$coefficients[1], slope = lm_punti_missioni$coefficients[2], col = 'blue') +
labs(title = "Linear model between missions' number and points", x = "# missions", y = 'Points')
ggplot(active_users, aes(x = as.factor(num_missioni), y = points_missioni)) +
geom_boxplot(color = 'black', width = 0.3, na.rm = TRUE) +
stat_summary(fun.y=mean, geom="point", color = 'red') +
geom_abline(intercept = lm_punti_missioni$coefficients[1], slope = lm_punti_missioni$coefficients[2], col = 'blue') +
labs(title = "Linear model between missions' number and points", x = "# missions", y = 'Points')
par(mfrow=c(2,2))
plot(lm_punti_missioni)
par(mfrow=c(1,1))
lm_punti_premi = lm(points_premi ~ num_reward, active_users)
summary(lm_punti_premi)
ggplot(filter(active_users, num_reward > 0), aes(x = factor(num_reward), y = points_premi)) +
geom_boxplot() +
stat_summary() +
stat_boxplot(geom = "errorbar", width = 0.3) +
geom_abline(intercept = lm_punti_premi$coefficients[1], slope = lm_punti_premi$coefficients[2], col = 'blue') +
labs(title = "Linear model reward points vs rewards' number", x = "# Rewards", y = "Reward Points")
ggplot(filter(active_users, num_reward > 0), aes(x = factor(num_reward), y = points_premi)) +
geom_boxplot() +
stat_summary(color = 'red') +
stat_boxplot(geom = "errorbar", width = 0.3) +
geom_abline(intercept = lm_punti_premi$coefficients[1], slope = lm_punti_premi$coefficients[2], col = 'blue') +
labs(title = "Linear model reward points vs rewards' number", x = "# Rewards", y = "Reward Points")
par(mfrow=c(2,2))
plot(lm_punti_premi)
par(mfrow=c(1,1))
ggplot(active_users, aes(x = tempo_app)) +
geom_histogram(color = 'black', fill = 'white', binwidth = 1) +
labs(title = "Histogram interval of time between first and last access", x = "Days", y = "Count")
ggplot(active_users, aes(x = last_time)) +
geom_histogram(color = 'black', fill = 'white', binwidth = 1) +
labs(title = "Histogram interval of time between last access and end survey", x = 'Days', y = 'Count')
global_names = c('id_player', 'ETA_MM_BambinoTODAY','last_time', 'tempo_app', 'num_prod','num_reward','num_access','num_missioni','points_prodotti', 'points_missioni','points_premi')
test = select(active_users, all_of(global_names))
colnames(test)[2] = 'EtÃ '
correlation_matrix<-cor(test[-1])
corrplot(correlation_matrix, method="number")
pca.data <- PCA(test[, -1], scale.unit = TRUE, graph = FALSE)
fviz_eig(pca.data, addlabels = TRUE)
fviz_pca_var(pca.data, col.var = "cos2",
gradient.cols = c("blue", "purple", 'red'),
repel = TRUE)
pca.var = c()
for (i in 1:10){
pca.var = append(pca.var, pca.data$eig[i,3])
}
data_frame(val = pca.var) %>%
ggplot(aes(x = as.factor(1:10),y = val, group = 1)) +
geom_point(color = "black") +
geom_line(linetype = 'dashed') +
labs(title = 'Cumulative sum of variance', x = '# Principal component', y = '% Variance')
nord_italia = c("VALLE D'AOSTA", "PIEMONTE", "LOMBARDIA", "EMILIA-ROMAGNA", "TRENTINO-ALTO ADIGE", "LIGURIA", "VENETO", "FRIULI-VENEZIA GIULIA")
centro_italia = c("UMBRIA", "LAZIO", "MARCHE", "TOSCANA")
sud_italia = c("ABRUZZO", "CAMPANIA", "BASILICATA", "CALABRIA", "PUGLIA", "MOLISE", "SICILIA", "SARDEGNA")
data$Regione[data$Regione %in% nord_italia] = "NORD"
data <- active_users
nord_italia = c("VALLE D'AOSTA", "PIEMONTE", "LOMBARDIA", "EMILIA-ROMAGNA", "TRENTINO-ALTO ADIGE", "LIGURIA", "VENETO", "FRIULI-VENEZIA GIULIA")
centro_italia = c("UMBRIA", "LAZIO", "MARCHE", "TOSCANA")
sud_italia = c("ABRUZZO", "CAMPANIA", "BASILICATA", "CALABRIA", "PUGLIA", "MOLISE", "SICILIA", "SARDEGNA")
data$Regione[data$Regione %in% nord_italia] = "NORD"
data$Regione[data$Regione %in% centro_italia] = "CENTRO"
data$Regione[data$Regione %in% sud_italia] = "SUD"
data$Regione = as.factor(data$Regione)
data$id_player = as.character(data$id_player)
summary(data[, 3:length(data)])
table(data$clust)
ggplot(data, aes(x = clust, y = ETA_MM_BambinoTODAY-6)) +
geom_boxplot() +
stat_boxplot(geom ='errorbar', width = 0.3) +
stat_summary(fun.y=mean, geom="point") +
labs(title = "Boxplots childs' age when survey started", x = 'Cluster', y = "EtÃ  (mesi)")
